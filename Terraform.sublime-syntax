%YAML 1.2
#
# This syntax definition is based on the Terraform guide:
# https://www.terraform.io/docs/language/index.html
#
# As well as the HCL Native Syntax Spec:
# https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md
#
# For documentation on the .subline-syntax format:
# https://www.sublimetext.com/docs/syntax.html
#
# Regex's in this file support the Oniguruma regex engine:
# https://raw.githubusercontent.com/kkos/oniguruma/5.9.6/doc/RE
#
---
name: Terraform
scope: source.terraform
version: 2

# File Extensions:
#
# - ".tf": the standard file extension
#   https://www.terraform.io/docs/language/index.html
file_extensions:
  - tf
  - nomad

variables:
  # Identifiers: ID_Start (ID_Continue | '-')*;
  #
  # There is an undocumented exception
  # that an underscore character is also accepted
  # as an id start character.
  #
  # https://github.com/hashicorp/hcl/blob/main/hclsyntax/spec.md#identifiers
  # http://unicode.org/reports/tr31/#Table_Lexical_Classes_for_Identifiers
  ID_Start: '[\p{ID_Start}_]'
  ID_Continue: '[\p{ID_Continue}-]'
  identifier: (?:{{ID_Start}}{{ID_Continue}}*)

  # Exponent: "e" or "E" followed by an optional sign
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#numeric-literals
  exponent: ([Ee][+-]?)

  # Character Escapes:
  #
  #   - \n: newline
  #   - \r: carriage return
  #   - \t: tab
  #   - \": quote
  #   - \\: backslash
  #   - \uNNNN: unicode char (NNNN is 4 hex digits)
  #   - \uNNNNNNNN: unicode char (NNNNNNNN us 8 digits)
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#template-expressions
  char_escapes: \\[nrt"\\]|\\u(\h{8}|\h{4})

  # Terraform Named Values
  #
  # https://www.terraform.io/docs/language/expressions/references.html
  named_values: var|local|module|data|path|terraform|each|count|self

  # Block types that are known to Terraform.
  #
  # data: https://developer.hashicorp.com/terraform/language/data-sources
  # ephemeral: https://developer.hashicorp.com/terraform/language/resources/ephemeral
  # locals: https://developer.hashicorp.com/terraform/language/values/locals
  # module: https://developer.hashicorp.com/terraform/language/modules/syntax
  # output: https://developer.hashicorp.com/terraform/language/values/outputs
  # provider: https://developer.hashicorp.com/terraform/language/providers/configuration
  # resource: https://developer.hashicorp.com/terraform/language/resources/syntax
  # terraform: https://developer.hashicorp.com/terraform/language/terraform#terraform-block-syntax
  # variable: https://developer.hashicorp.com/terraform/language/values/variables
  terraform_known_blocks: data|ephemeral|locals|module|output|provider|resource|terraform|variable

  # Terraform built-in type keywords
  #
  # https://www.terraform.io/docs/language/expressions/type-constraints.html#primitive-types
  # https://www.terraform.io/docs/language/expressions/type-constraints.html#dynamic-types-the-quot-any-quot-constraint
  terraform_type_keywords: any|string|number|bool

  # Built-In Functions
  #
  # https://developer.hashicorp.com/terraform/language/functions
  predeclared_funcs: |-
    \b(?x:
      # numbers
       abs|ceil|floor|log|max|min|parseint|pow|signum
      # string
      |chomp|endswith|format|formatlist|indent|join|lower|regex|regexall|replace
      |split|startswith|strcontains|strrev|substr
      |templatestring|title|trim|trimprefix|trimsuffix|trimspace|upper
      # collection
      |alltrue|anytrue|chunklist|coalesce|coalescelist|compact|concat|contains
      |distinct|element|flatten|index|keys|length|list|lookup
      |map|matchkeys|merge|one|range|reverse
      |setintersection|setproduct|setsubtract|setunion|slice|sort|sum
      |transpose|values|zipmap
      # encoding
      |base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|textdecodebase64|textencodebase64|urlencode|yamldecode|yamlencode
      # filesystem
      |abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile
      # date and time
      |formatdate|plantimestamp|timeadd|timecmp|timestamp
      # hash and crypto
      |base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filesha1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5
      # ip network
      |cidrhost|cidrnetmask|cidrsubnet|cidrsubnets
      # type conversion
      |can|issensitive|nonsensitive|sensitive|tobool|tolist|tomap|tonumber|toset|tostring|try|type
      # terraform-specific
      |provider::terraform::(?:encode_tfvars|decode_tfvars|encode_expr)
      # deprecated/old
      |filemd1
    )\b

contexts:
  main:
    - include: comments
    - include: attribute_definition
    - include: imports
    - include: block
    - include: expressions

  comments:
    - include: inline_comments
    - include: block_comments

  # Expressions:
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#expression-terms
  expressions:
    - include: literals
    - include: operators
    - include: brackets
    - include: objects
    - include: attribute_access
    - include: functions
    - include: parens
    - include: identifiers

  comma:
    - match: \,
      comment: Commas - used in certain expressions
      scope: punctuation.separator.terraform

  parens:
    - match: \(
      scope: punctuation.section.parens.begin.terraform
      comment: Parens - matched *after* function syntax
      push: paren_body

  paren_body:
    - match: \)
      scope: punctuation.section.parens.end.terraform
      pop: true
    - include: expressions

  # Literal Values: Numbers, Language Constants, and Strings
  #
  #   Strings are _technically_ part of the "expression sub-language",
  #   but make the most sense to be part of this stack.
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#literal-values
  literals:
    - include: numeric_literals
    - include: language_constants
    - include: string_literals
    - include: heredoc
    - include: type_keywords
    - include: named_value_references

  named_value_references:
    - match: '\b({{named_values}})\b'
      comment: Special variables available only to Terraform.
      scope: variable.language.terraform

  type_keywords:
    - match: '\b({{terraform_type_keywords}})\b'
      comment: Type keywords known to Terraform.
      scope: storage.type.terraform

  # Inline Comments: begin at the operator, end at the end of the line.
  #
  # https://www.terraform.io/docs/language/syntax/configuration.html#comments
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#comments-and-whitespace
  inline_comments:
    - match: '#|//'
      comment: Inline Comments
      scope: punctuation.definition.comment.terraform
      push: inline_comment_body

  inline_comment_body:
    - meta_scope: comment.line.terraform
    - match: $\n?
      scope: punctuation.definition.comment.terraform
      pop: true

  # Block comments: start and end delimiters for multi-line comments.
  #
  # https://www.terraform.io/docs/language/syntax/configuration.html#comments
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#comments-and-whitespace
  block_comments:
    - match: /\*
      comment: Block comments
      scope: punctuation.definition.comment.terraform
      push: block_comments_body

  block_comments_body:
    - meta_scope: comment.block.terraform
    - match: \*/
      scope: punctuation.definition.comment.terraform
      pop: true

  # Language Constants: booleans and `null`.
  #
  # https://www.terraform.io/docs/language/expressions/types.html#literal-expressions
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#literal-values
  language_constants:
    - match: \btrue\b
      scope: constant.language.boolean.true.terraform
    - match: \bfalse\b
      scope: constant.language.boolean.false.terraform
    - match: \bnull\b
      scope: constant.language.null.terraform

  # Numbers: Integers, fractions and exponents
  #
  # https://www.terraform.io/docs/language/expressions/types.html
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#numeric-literals
  numeric_literals:
    - match: \b\d+({{exponent}})\d+\b
      comment: Integer, no fraction, optional exponent
      scope: constant.numeric.float.terraform
      captures:
        1: punctuation.separator.exponent.terraform
    - match: \b\d+(\.)\d+(?:({{exponent}})\d+)?\b
      comment: Integer, fraction, optional exponent
      scope: constant.numeric.float.terraform
      captures:
        1: punctuation.separator.decimal.terraform
        2: punctuation.separator.exponent.terraform
    - match: \b\d+\b
      comment: Integers
      scope: constant.numeric.integer.terraform

  # Strings:
  #
  # https://www.terraform.io/docs/language/expressions/types.html
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#template-expressions
  string_literals:
    - match: (")(true)(")
      scope: string.quoted.double.terraform
      captures:
        1: punctuation.definition.string.begin.terraform
        2: constant.language.boolean.true.terraform
        3: punctuation.definition.string.end.terraform
    - match: (")(false)(")
      scope: string.quoted.double.terraform
      captures:
        1: punctuation.definition.string.begin.terraform
        2: constant.language.boolean.false.terraform
        3: punctuation.definition.string.end.terraform
    - match: (")(none|null)(")
      scope: string.quoted.double.terraform
      captures:
        1: punctuation.definition.string.begin.terraform
        2: constant.language.null.terraform
        3: punctuation.definition.string.end.terraform
    - match: (")(-?)(\d+)(")
      scope: string.quoted.double.terraform
      captures:
        1: punctuation.definition.string.begin.terraform
        2: keyword.operator.arithmetic.terraform
        3: meta.number.integer.terraform constant.numeric.value.terraform
        4: punctuation.definition.string.end.terraform
    - match: '"'
      comment: Strings
      scope: punctuation.definition.string.begin.terraform
      push: string_body

  string_body:
    - meta_scope: meta.string.terraform string.quoted.double.terraform
    - match: '"'
      scope: punctuation.definition.string.end.terraform
      pop: true
    - include: string_interpolation
    - match: '{{char_escapes}}'
      comment: Character Escapes
      scope: constant.character.escape.terraform
    - match: (?=\barn:aws:)
      push: aws_acl

  aws_acl:
    - meta_scope: variable.language.acl.terraform
    - include: string_interpolation
    - match: :|/
      scope: punctuation.separator.sequence.terraform
    - match: \*
      scope: constant.other.wildcard.asterisk.terraform
    - match: (?![\w-])
      pop: true

  # String Interpolation: ("${" | "${~") Expression ("}" | "~}"
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#templates
  string_interpolation:
    - match: ([$%]\{)(~)?
      captures:
        1: punctuation.section.interpolation.begin.terraform
        2: keyword.operator.template.trim.left.terraform
      push: string_interpolation_body

  string_interpolation_body:
    - meta_scope: meta.interpolation.terraform
    - meta_content_scope: source.terraform
    - clear_scopes: 1  # Clear the string.* scope.
    - match: (~)?(\})
      captures:
        1: keyword.operator.template.trim.right.terraform
        2: punctuation.section.interpolation.end.terraform
      pop: true
    - match: \b(if|else|endif|for|in|endfor)\b
      comment: if/else/endif and for/in/endfor directives
      scope: keyword.control.terraform
    - include: expressions

  # String Heredocs
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#template-expressions
  heredoc:
    - match: (\<\<\-?)\s*({{identifier}})\s*$
      comment: String Heredoc's
      captures:
        1: keyword.operator.heredoc.terraform
        2: keyword.control.heredoc.terraform
      push: heredoc_body

  heredoc_body:
    - meta_content_scope: meta.string.terraform string.unquoted.heredoc.terraform
    - match: ^\s*\2\s*$
      comment: The heredoc token identifier (second capture above).
      scope: keyword.control.heredoc.terraform
      pop: true
    - include: string_interpolation

  # Operators:
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#operators-and-delimiters
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#operations
  operators:
    - match: \>\=   # >=
      scope: keyword.operator.comparison.terraform
    - match: \<\=   # <=
      scope: keyword.operator.comparison.terraform
    - match: \=\=   # ==
      scope: keyword.operator.comparison.terraform
    - match: \!\=   # !=
      scope: keyword.operator.comparison.terraform
    - match: \+     # +
      scope: keyword.operator.arithmetic.terraform
    - match: \-     # -
      scope: keyword.operator.arithmetic.terraform
    - match: \*     # *
      scope: keyword.operator.arithmetic.terraform
    - match: \/     # /
      scope: keyword.operator.arithmetic.terraform
    - match: \%     # %
      scope: keyword.operator.arithmetic.terraform
    - match: \&\&   # &&
      scope: keyword.operator.logical.terraform
    - match: \|\|   # ||
      scope: keyword.operator.logical.terraform
    - match: \!     # !
      scope: keyword.operator.logical.terraform
    - match: \>     # >
      scope: keyword.operator.comparison.terraform
    - match: \<     # <
      scope: keyword.operator.comparison.terraform
    - match: \?     # ?
      scope: keyword.operator.ternary.terraform
    - match: \.\.\. # ...
      scope: keyword.operator.terraform
    - match: ':'  # :
      scope: keyword.operator.ternary.terraform

  # Terraform "import" statements
  #
  # https://www.terraform.io/docs/cli/import/usage.html
  imports:
    - match: \s*(terraform)\s*(import)\s*
      comment: Importing resources
      captures:
        1: support.constant.terraform
        2: keyword.control.import.terraform
      push: import_body

  import_body:
    - match: \"
      comment: String literal label
      scope: punctuation.definition.string.begin.terraform
      push: literal_label_body
    - match: "{{identifier}}"
      comment: Identifier label
      scope: entity.name.label.terraform
    - include: numeric_literals
    - include: attribute_access
    - match: $\n?
      comment: Pop at newline
      pop: true

  literal_label_body:
    - meta_scope: string.quoted.double.terraform
    - match: \"
      scope: punctuation.definition.string.end.terraform
      pop: true

  # Brackets: matches tuples and subscript notation
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#index-operator
  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.terraform
      push: bracket_body

  bracket_body:
    - match: (\*)?\]
      comment: Full-splat operator
      scope: punctuation.section.brackets.end.terraform
      captures:
        1: keyword.operator.splat.terraform
      pop: true
    - include: comma
    - include: comments
    - include: tuple_for_expression
    - include: expressions

  # Objects: collection values
  #
  #   Allows keys as identifiers, strings, and computed values wrapped in parens.
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#collection-values
  objects:
    - match: \{
      scope: punctuation.section.braces.begin.terraform
      push: object_body

  object_body:
    - meta_scope: meta.braces.terraform
    - match: \}
      scope: punctuation.section.braces.end.terraform
      pop: true
    - include: object_for_expression
    - include: comments
    - match: (?=({{identifier}}|\".*?\")\s*=)
      push:
        - object_value
        - assignment_operator
        - object_literal_key
    - match: \(
      comment: Computed object key (any expression between parens)
      scope: punctuation.section.parens.begin.terraform
      push:
        - object_value
        - assignment_operator
        - object_computed_key
    - include: Packages/Terraform/JSON (Terraform).sublime-syntax#object-body

  object_computed_key:
    - meta_scope: meta.mapping.key.terraform
    - include: paren_body

  object_literal_key:
    - match: '{{identifier}}'
      scope: meta.mapping.key.terraform string.unquoted.terraform
      pop: true
    - match: (\").*?(\")
      scope: meta.mapping.key.terraform string.quoted.double.terraform
      captures:
        1: punctuation.definition.string.begin.terraform
        2: punctuation.definition.string.end.terraform
      pop: true
    - include: else_pop

  assignment_operator:
    - match: =
      scope: keyword.operator.assignment.terraform
      pop: true
    - include: else_pop

  # Object key values: pop at comma, newline, and closing-bracket
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#collection-values
  object_value:
    - include: comments
    - include: expressions
    - match: \,
      comment: Pop scope on comma.
      scope: punctuation.separator.terraform
      pop: true
    - match: $\n?
      comment: Pop scope on EOL.
      pop: true
    - match: (?=\})
      comment: Lookahead (don't consume) and pop scope on a bracket.
      scope: punctuation.section.braces.end.terraform
      pop: true

  # Attribute Access: "." Identifier
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#attribute-access-operator
  attribute_access:
    - match: \.
      scope: punctuation.accessor.dot.terraform
      push: member

  member:
    - include: comments
    - match: "{{identifier}}"
      comment: Attribute access
      scope: variable.other.member.terraform
      pop: true
    - match: \d+
      comment: Subscript
      scope: constant.numeric.integer.terraform
      pop: true
    - match: \*
      comment: Attribute-only splat
      scope: keyword.operator.splat.terraform
      pop: true
    - include: else_pop

  # Attribute Definition: Identifier "=" Expression Newline
  #
  # The "=" operator cannot be immediately followed by "="
  # ">", as those are other operators, not attr definitions.
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#attribute-definitions
  attribute_definition:
    - match: (?=(\()?({{identifier}})(\))?\s*(\=(?![\=\>])))
      push:
        - assignment_operator
        - attribute_key

  attribute_key:
    - match: \((?={{identifier}}\))
      scope: punctuation.section.parens.begin.terraform
      set:
        - attribute_key_end
        - attribute_key
    # https://developer.hashicorp.com/terraform/language/meta-arguments/for_each
    - match: for_each\b
      scope: variable.declaration.terraform keyword.control.loop.for.terraform
      pop: true
    # https://developer.hashicorp.com/terraform/language/meta-arguments/count
    - match: count\b
      scope: variable.declaration.terraform keyword.control.conditional.terraform
      pop: true
    - match: '{{identifier}}'
      scope: variable.declaration.terraform variable.other.readwrite.terraform
      pop: true

  attribute_key_end:
    - match: \)
      scope: punctuation.section.parens.end.terraform
      pop: true

  # Functions: Terraform builtins and unknown
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#functions-and-function-calls
  # https://www.terraform.io/docs/language/expressions/function-calls.html
  functions:
    - match: (?:({{predeclared_funcs}})|\b({{identifier}})\b)(\()
      comment: Built-in function calls
      captures:
        1: support.function.builtin.terraform
        2: variable.function.terraform
        3: punctuation.section.parens.begin.terraform
      push: function_argument_list_body

  function_argument_list_body:
    - meta_scope: meta.function-call.terraform
    - match: \)
      scope: punctuation.section.parens.end.terraform
      pop: true
    - include: comments
    - include: expressions
    - include: comma

  # Tuple for-Expression:
  #
  # "[" "for" Identifier ("," Identifier)? "in" Expression ":" Expression ("if" Expression)? "]";
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#for-expressions
  # https://www.terraform.io/docs/language/expressions/for.html
  tuple_for_expression:
    - match: \bfor\b
      comment: for expression (arrays)
      scope: keyword.control.loop.for.terraform
      set: tuple_for_expression_body

  tuple_for_expression_body:
    - match: \]
      scope: punctuation.section.brackets.end.terraform
      pop: true
    - include: for_expression_body

  # Object for-Expression:
  #
  # "{" "for" Identifier ("," Identifier)? "in" Expression ":" Expression "=>" Expression "..."? ("if" Expression)? "}";
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#for-expressions
  # https://www.terraform.io/docs/language/expressions/for.html
  object_for_expression:
    - match: \bfor\b
      comment: for expression (arrays)
      scope: keyword.control.loop.for.terraform
      set: object_for_expression_body

  object_for_expression_body:
    - match: \}
      scope: punctuation.section.braces.end.terraform
      pop: true
    - match: \=\>
      scope: punctuation.separator.key-value.terraform
    - include: for_expression_body

  # Shared body syntax for tuple and object for-expressions.
  # They require different `set` blocks because they are
  # pop'd with different characters and objects allow `=>`.
  for_expression_body:
    - match: \bin\b
      comment: in keyword
      scope: keyword.control.loop.in.terraform
    - match: \bif\b
      comment: if keyword
      scope: keyword.control.conditional.terraform
    - match: '\:'
      scope: punctuation.section.block.loop.for.terraform
    - include: expressions
    - include: comments
    - include: comma

  identifiers:
    - match: "{{identifier}}"
      scope: variable.other.readwrite.terraform

  # Blocks: Identifier (StringLit|Identifier)* "{" Newline Body "}" Newline;
  #
  # https://github.com/hashicorp/hcl2/blob/master/hcl/hclsyntax/spec.md#structural-elements
  block:
    # Special case heuristic for the AWS two-term resources
    - match: (\b(resource)\s+(")(aws_{{identifier}})(")\s+(")({{identifier}})("))\s*(\{)
      captures:
        1: meta.type.terraform
        2: keyword.declaration.terraform
        3: punctuation.definition.begin.terraform
        4: support.type.aws
        5: punctuation.definition.end.terraform
        6: punctuation.definition.begin.terraform
        7: entity.name.type.aws
        8: punctuation.definition.end.terraform
        9: punctuation.section.block.begin.terraform
      push: block_body

    # Generic
    - match: (?:\b({{terraform_known_blocks}})\b|({{identifier}}))(?=[\s\"\-[:word:]]*(\{))
      captures:
        1: keyword.declaration.terraform
        2: entity.name.type.terraform
      push: block_name

  block_name:
    - meta_scope: meta.type.terraform
    - match: \"
      scope: punctuation.definition.string.begin.terraform
      push: block_name_body
    - match: "{{identifier}}"
      scope: entity.name.label.terraform
    - match: \{
      scope: punctuation.section.block.begin.terraform
      set: block_body

  block_name_body:
    - meta_scope: string.quoted.double.terraform
    - match: \"
      scope: punctuation.definition.string.end.terraform
      pop: true

  block_body:
    - meta_scope: meta.block.terraform
    - match: \}
      scope: punctuation.section.block.end.terraform
      pop: true
    - include: main

  else_pop:
    - match: (?=\S)
      pop: true
