# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Terraform
scopeName: source.terraform
fileTypes: [tf, tfvars, hcl, nomad]
uuid: 9060ca81-906d-4f19-a91a-159f4eb119d6

patterns:
  - include: '#comments'
  - include: '#top_level_attribute_definition'
  - include: '#imports'
  - include: '#block'
  - include: '#expressions'

repository:
  main:
    patterns:
      - include: '#comments'
      - include: '#block'
      - include: '#expressions'

  comments:
    patterns:
      - include: '#inline_comments'
      - include: '#block_comments'

  expressions:
    patterns:
      - include: '#literal_values'
      - include: '#operators'
      - include: '#brackets'
      - include: '#objects'
      - include: '#attribute_access'
      - include: '#functions'
      - include: '#parens'

  literal_values:
    patterns:
      - include: '#numeric_literals'
      - include: '#language_constants'
      - include: '#string_literals'
      - include: '#heredoc'
      - include: '#type_keywords'
      - include: '#named_value_references'

  comma:
    comment: Commas - used in certain expressions
    name: punctuation.separator.terraform
    match: \,

  parens:
    comment: Parens - matched *after* function syntax
    begin: '\('
    beginCaptures:
      '0': { name: punctuation.section.parens.begin.terraform }
    end: '\)'
    endCaptures:
      '0': { name: punctuation.section.parens.end.terraform }
    patterns:
      - include: '#expressions'
      - match: \b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b
        comment: Local Identifiers
        name: variable.other.readwrite.terraform

  named_value_references:
    comment: Terraform built-in variables
    match: '\b(var|local|module|data|path|terraform)\b'
    name: support.constant.terraform

  type_keywords:
    comment: Type keywords known to Terraform.
    match: '\b(any|string|number|bool)\b'
    name: storage.type.terraform

  inline_comments:
    comment: Inline comments
    name: comment.line.terraform
    begin: '#|//'
    beginCaptures:
      '0': { name: punctuation.definition.comment.terraform }
    end: "$\n?"

  block_comments:
    comment: Block comments
    name: comment.block.terraform
    begin: /\*
    beginCaptures:
      '0': { name: punctuation.definition.comment.terraform }
    end: \*/
    endCaptures:
      '0': { name: punctuation.definition.comment.terraform }

  language_constants:
    comment: Language Constants
    name: constant.language.terraform
    match: \b(true|false|null)\b

  numeric_literals:
    patterns:
      - comment: Integer, no fraction, optional exponent
        name: constant.numeric.float.terraform
        match: '\b\d+(([Ee][+-]?))\d+\b'
        captures:
          '1': { name: punctuation.separator.exponent.terraform }
      - comment: Integer, fraction, optional exponent
        name: constant.numeric.float.terraform
        match: '\b\d+(\.)\d+(?:(([Ee][+-]?))\d+)?\b'
        captures:
          '1': { name: punctuation.separator.decimal.terraform }
          '2': { name: punctuation.separator.exponent.terraform }
      - comment: Integers
        name: constant.numeric.integer.terraform
        match: '\b\d+\b'

  string_literals:
    comment: Strings
    name: string.quoted.double.terraform
    begin: '"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.terraform }
    end: '"'
    endCaptures:
      '0': { name: punctuation.definition.string.end.terraform }
    patterns:
      - include: '#string_interpolation'
      - comment: Character Escapes
        match: \\[nrt"\\]|\\u(\h{8}|\h{4})
        name: constant.character.escape.terraform

  string_interpolation:
    comment: String interpolation
    name: meta.interpolation.terraform
    begin: '(\$|\%)\{'
    beginCaptures:
      '0': { name: keyword.other.interpolation.begin.terraform }
    end: \}
    endCaptures:
      '0': { name: keyword.other.interpolation.end.terraform}
    patterns:
      - comment: Trim left whitespace
        name: keyword.operator.template.left.trim.terraform
        match: \~\s
      - comment: Trim right whitespace
        name: keyword.operator.template.right.trim.terraform
        match: \s\~
      - comment: if/else/endif and for/in/endfor directives
        name: keyword.control.terraform
        match: \b(if|else|endif|for|in|endfor)\b
      - include: '#expressions'

  heredoc:
    comment: Heredocs
    name: string.unquoted.heredoc.terraform
    begin: '(\<\<\-?)\s*(\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b)\s*$'
    beginCaptures:
      '1': { name: keyword.operator.heredoc.terraform }
      '2': { name: keyword.control.heredoc.terraform }
    end: '^\s*\2\s*$'
    endCaptures:
      '0': { name: keyword.control.heredoc.terraform }
    patterns:
      - include: '#string_interpolation'

  operators:
    patterns:
      - match: \>\=   # >=
        name: keyword.operator.terraform
      - match: \<\=   # <=
        name: keyword.operator.terraform
      - match: \=\=   # ==
        name: keyword.operator.terraform
      - match: \!\=   # !=
        name: keyword.operator.terraform
      - match: \+     # +
        name: keyword.operator.arithmetic.terraform
      - match: \-     # -
        name: keyword.operator.arithmetic.terraform
      - match: \*     # *
        name: keyword.operator.arithmetic.terraform
      - match: \/     # /
        name: keyword.operator.arithmetic.terraform
      - match: \%     # %
        name: keyword.operator.arithmetic.terraform
      - match: \&\&   # &&
        name: keyword.operator.logical.terraform
      - match: \|\|   # ||
        name: keyword.operator.logical.terraform
      - match: \!     # !
        name: keyword.operator.logical.terraform
      - match: \>     # >
        name: keyword.operator.terraform
      - match: \<     # <
        name: keyword.operator.terraform
      - match: \?     # ?
        name: keyword.operator.terraform
      - match: \.\.\. # ...
        name: keyword.operator.terraform
      - match: "\\:"  # :
        name: keyword.operator.terraform

  brackets:
    comment: Tuples & subscript notation
    begin: \[
    beginCaptures:
      '0': { name: punctuation.section.brackets.begin.terraform }
    end: (\*)?\]
    endCaptures:
      '0': { name: punctuation.section.brackets.end.terraform }
      '1': { name: keyword.operator.splat.terraform }
    patterns:
      - include: '#comma'
      - include: '#comments'
      - include: '#expressions'
      - include: '#tuple_for_expression'

  objects:
    comment: Map collection values
    name: meta.braces.terraform
    begin: '\{'
    beginCaptures:
      '0': { name: punctuation.section.braces.begin.terraform }
    end: '\}'
    endCaptures:
      '0': { name: punctuation.section.braces.end.terraform }
    patterns:
      - include: '#object_for_expression'
      - include: '#comments'
      - comment: Literal, named object key
        begin: '\s*(\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b)\s*(\=)\s*'
        beginCaptures:
          '1': { name: 'meta.mapping.key.terraform string.unquoted.terraform' }
          '2': { name: keyword.operator.terraform }
        end: ((\,)|($\n?)|(?=\}))
        endCaptures:
          '1': { name: punctuation.separator.terraform }
          '3': { name: punctuation.section.braces.end.terraform }
        patterns:
          - include: '#object_key_values'
      - comment: String object key
        begin: '((\").*(\"))\s*(\=)\s*'
        beginCaptures:
          '1': { name: meta.mapping.key.terraform string.quoted.double.terraform }
          '2': { name: punctuation.definition.string.begin.terraform }
          '3': { name: punctuation.definition.string.end.terraform }
          '4': { name: keyword.operator.terraform }
        end: ((\,)|($\n?)|(?=\}))
        endCaptures:
          '1': { name: punctuation.separator.terraform }
          '3': { name: punctuation.section.braces.end.terraform }
        patterns:
          - include: '#object_key_values'
      - comment: Begin computed object key
        name: meta.mapping.key.terraform
        begin: '\('
        beginCaptures:
          '0': { name: punctuation.section.parens.begin.terraform }
        end: '(\))\s*(\=)\s*'
        endCaptures:
          '1': { name: punctuation.section.parens.end.terraform }
          '2': { name: keyword.operator.terraform }
        patterns:
          - include: '#expressions'
      - comment: Random Expression, for matching after computed keys
        patterns:
          - include: '#main'

  object_key_values:
    patterns:
      - include: '#comments'
      - include: '#expressions'

  attribute_access:
    comment: Attribute Access - "." Identifier
    begin: '\.'
    beginCaptures:
      '0': { name: keyword.operator.accessor.terraform }
    end: '(\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b)|(\*)|(\d+)'
    endCaptures:
      '1': { name: variable.other.member.terraform }
      '2': { name: keyword.operator.splat.terraform }
      '3': { name: constant.numeric.integer.terraform }

  top_level_attribute_definition:
    comment: Attribute Definition - Identifier "=" Expression Newline
    match: (\()?(\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b)(\))?\s*(\=[^\=|\>])\s*
    name: variable.declaration.terraform
    captures:
      '1': { name: punctuation.section.parens.begin.terraform }
      '2': { name: variable.other.readwrite.terraform }
      '3': { name: punctuation.section.parens.end.terraform }
      '4': { name: keyword.operator.assignment.terraform }

  functions:
    comment: Functions calls- Terraform builtins and unknown
    name: meta.function-call.terraform
    begin: '((abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)|\b((?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b))(\()'
    beginCaptures:
      '2': { name: support.function.builtin.terraform }
      '3': { name: variable.function.terraform }
      '4': { name: punctuation.section.parens.begin.terraform }
    end: \)
    endCaptures:
      '0': { name: punctuation.section.parens.end.terraform }
    patterns:
      - include: '#comments'
      - include: '#expressions'
      - include: '#comma'

  tuple_for_expression:
    comment: Tuple for-expression
    begin: \bfor\b
    beginCaptures:
      '0': { name: keyword.control.terraform }
    end: '(?=\])'
    patterns:
      - match: '\bin\b'
        name: keyword.operator.word.terraform
      - match: '\bif\b'
        name: keyword.control.conditional.terraform
      - match: "\\:"
        name: keyword.operator.terraform
      - include: '#expressions'
      - include: '#comments'
      - include: '#comma'
      - match: '\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b'
        comment: Local Identifiers
        name: variable.other.readwrite.terraform

  object_for_expression:
    comment: Object for-expression
    begin: '\bfor\b'
    beginCaptures:
      '0': { name: keyword.control.terraform }
    end: '(?=\})'
    patterns:
      - match: \=\>
        name: storage.type.function.terraform
      - match: '\bin\b'
        name: keyword.operator.word.terraform
      - match: '\bif\b'
        name: keyword.control.conditional.terraform
      - match: "\\:"
        name: keyword.operator.terraform
      - include: '#expressions'
      - include: '#comments'
      - include: '#comma'
      - match: '\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b'
        comment: Local Identifiers
        name: variable.other.readwrite.terraform

  # Blocks in the tmLanguage only catch the first line of the
  # block definition. The body of the block is covered by the
  # #objects context, since we don't have a stack to push and
  # pop contexts, it's impossible to know which one we are in.
  block:
    comment: Blocks
    name: meta.type.terraform
    begin: '(\b(resource|provider|variable|output|locals|module|data|terraform)\b|(\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b))(?=[\s\"\-[:word:]]*(\{))'
    beginCaptures:
      '2': { name: storage.type.terraform }
      '3': { name: entity.name.type.terraform }
    end: '(?=\{)'
    patterns:
      - comment: String literal label
        name: string.quoted.double.terraform
        begin: '\"'
        beginCaptures:
          '0': { name: punctuation.definition.string.begin.terraform }
        end: '\"'
        endCaptures:
          '0': { name: punctuation.definition.string.end.terraform }
      - comment: Identifer label
        match: '\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b'
        name: entity.name.label.terraform

  imports:
    comment: Terraform imports
    begin: '\s*(terraform)\s*(import)\s*'
    beginCaptures:
      '1': { name: support.constant.terraform }
      '2': { name: keyword.control.import.terraform }
    end: '$\n?'
    patterns:
      - include: '#string_literals'
      - match: '\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\b'
        comment: Identifier label
        name: entity.name.label.terraform
      - include: '#numeric_literals'
      - include: '#attribute_access'
